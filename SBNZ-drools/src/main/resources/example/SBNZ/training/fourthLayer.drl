package rules;

import com.example.SBNZ.model.training.InputDataTraining;
import com.example.SBNZ.model.training.Training;
import com.example.SBNZ.model.training.Exercise;
import com.example.SBNZ.model.training.Session;
import com.example.SBNZ.model.training.CurrentFact;

import com.example.SBNZ.enums.diet.Goal;
import com.example.SBNZ.enums.training.Difficulty;
import com.example.SBNZ.enums.training.ExerciseCategory;
import com.example.SBNZ.enums.training.Muscle;
import java.util.ArrayList;
import java.util.List;

rule "When daysweek and resttime is generated, set the session"
	no-loop
	when
	    $inputData: InputDataTraining(exercises.size() == 0)
        $currentFact: CurrentFact($exerciseList: exerciseList, daysWeek >= 3, daysWeek <= 5)
	then
	    System.out.println("FOURTH LAYER RULE: SET EXERCISE LIST");
        $inputData.setExercises($exerciseList);
        update($inputData);
	end

/*
rule "Lesgo"
	no-loop
	when
		$inputData: InputDataTraining(training.size() == 0)
        $currentFact: CurrentFact(layer == 5, $exerciseList: exerciseList, daysWeek >= 3, daysWeek <= 5 )
	then
        $inputData.getTraining().add(new Training());
        Session session = new Session();
        System.out.println($currentFact.getDaysWeek());
        session.setExercise((Exercise) $exerciseList.get(0));
        $inputData.getTraining().get($inputData.getTraining().size()-1).addSession(session);
        update($inputData);
	end

rule "End condition"
	no-loop
	when
	    $currentFact: CurrentFact(layer == 5, $daysOfWeek: daysWeek)
		$inputData: InputDataTraining(training.size() == $daysOfWeek)
	then
		System.out.println("we're done");
        update($inputData);
	end

rule "Lesg2o"

	when
		$currentFact: CurrentFact(layer == 5, $exerciseList: exerciseList)
		$inputData: InputDataTraining(training.size() != 0, training.get(training.size()-1).getSessionList().size() < 4,
										$muscles: training.get(training.size()-1).getMuscles())

		$muscle: Muscle() from $muscles
		accumulate(Exercise($e: this,
								!muscleList.contains($muscle)
                                    ) from $exerciseList,
                           $filteredExercises: collectList($e)
                )
	then
		System.out.println($muscle);
		System.out.println($filteredExercises);
		Session session = new Session();
        session.setExercise((Exercise) $filteredExercises.get(0));
        $inputData.getTraining().get($inputData.getTraining().size()-1).addSession(session);
        update($inputData);
	end
*/
