package rules;

import com.example.SBNZ.model.training.InputDataTraining;
import com.example.SBNZ.model.training.Training;
import com.example.SBNZ.model.training.Exercise;
import com.example.SBNZ.model.training.Session;
import com.example.SBNZ.model.training.CurrentFact;

import com.example.SBNZ.enums.diet.Goal;
import com.example.SBNZ.enums.training.Difficulty;
import com.example.SBNZ.enums.training.ExerciseCategory;
import com.example.SBNZ.enums.training.Muscle;
import java.util.ArrayList;
import java.util.List;

rule "When daysweek and resttime is generated, and list of trainings is empty, generate the first training"
	no-loop
	when
	    $inputData: InputDataTraining(training.size() == 0)
        $currentFact: CurrentFact(daysWeek >= 3, daysWeek <= 5,
                                  $restTime: restTime, $numberOfSessions: numberOfSessions, $goal: goal)
	then
	    System.out.println("[TRAINING] Fourth layer - creating the initial training");
        $inputData.getTraining().add(new Training($restTime, $numberOfSessions, $goal));
        update($inputData);
	end

rule "When training with less than 4 sessions exists, create a new session"
    when
        $inputData: InputDataTraining(training.size() > 0, training.get(training.size() - 1).getSessionList().size() < 4,
                                      $lastTraining: training.get(training.size() - 1))
        $currentFact: CurrentFact($exerciseList: exerciseList)

        accumulate(
                           Exercise($e: this,
                                    $muscleList: muscleList
                                    ) from $exerciseList and
                                    Number(intValue == 0) from accumulate(
                                        Muscle($m: this, $muscleList.contains(this)// this memberOf $muscleList
                                        ) from $lastTraining.getMuscles(),
                                        count(1)
                                    ),
                           $filteredExercises: collectList($e)
                )
    then
        System.out.println("[TRAINING] Fourth layer - adding sessions to the last created training until the number of sessions is 4");
        $lastTraining.addSession($filteredExercises);
        update($inputData);
    end

rule "When last created training is full, create a new training"
    no-loop
    when
        $currentFact: CurrentFact($goal: goal, $restTime: restTime,
                                  $numberOfSessions: numberOfSessions, $daysWeek: daysWeek)
        $inputData: InputDataTraining(training.size() > 0, training.get(training.size() - 1).getSessionList().size() == 4,
                                              training.size() < $daysWeek)

    then
        System.out.println("[TRAINING] Fourth layer - last created training is full, creating new training bcs number of trainings is less than daysweek");
        $inputData.getTraining().add(new Training($restTime, $numberOfSessions, $goal));
                update($inputData);
    end

rule "When number of trainings is equal to daysOfWeek -> the end"
    no-loop
    when
        $currentFact: CurrentFact($daysWeek: daysWeek)
        $inputData: InputDataTraining(training.size() > 0, training.size() == $daysWeek)
    then
        System.out.println("[TRAINING] Fourth layer - Finished generating training plan.");
        drools.halt();
    end
