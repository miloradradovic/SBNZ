package rules;

import com.example.SBNZ.model.diet.InputDataDiet;
import com.example.SBNZ.model.diet.Diet;
import com.example.SBNZ.enums.diet.Goal;
import com.example.SBNZ.enums.diet.HealthIssue;
import com.example.SBNZ.enums.diet.JunkFoodFrequency;
import com.example.SBNZ.enums.diet.MealType;
import com.example.SBNZ.model.diet.Meal;
import java.util.ArrayList;


rule "When junk food frequency is OFTEN remove foods which are more than 10 percent junk food and filter health Issues"
	no-loop
    	when
    	    $meals: List(size > 0) from collect(Meal())
            $diet: Diet(kCal > 0, calorieMin != 0)
            $inputData: InputDataDiet(diet != null, $healthIssues: healthIssues,
                                          junkFoodFrequency == JunkFoodFrequency.OFTEN)
        	accumulate(
                           Meal($m: this,
                                    $healthIssueTypes: healthIssueTypes,
                                    junkPercentage <= 10
                                    ) from $meals and
                                    Number(intValue == 0) from accumulate(
                                        HealthIssue($hi: this, $healthIssueTypes.contains(this)
                                        ) from $healthIssues,
                                        count(1)
                                    ),
                           $filteredMeals: collectList($m)
                )
    	then
    	System.out.println("[DIET] Fourth layer - junk freq is often, filter meals by health issues");
        $inputData.getDiet().setMeals($filteredMeals);
        update($inputData);
    end

rule "When junk food frequency is SOMETIMES remove foods which are more than 20 percent junk food and filter health Issues"
	no-loop
    	when
    	    $meals: List(size > 0) from collect(Meal())
            $diet: Diet(kCal > 0, calorieMin != 0)
            $inputData: InputDataDiet(diet != null, $healthIssues: healthIssues,
                                          junkFoodFrequency == JunkFoodFrequency.SOMETIMES)
        	accumulate(
                           Meal($m: this,
                                $healthIssueTypes: healthIssueTypes,
                                    junkPercentage <= 20
                                    ) from $meals and
                                    Number(intValue == 0) from accumulate(
                                        HealthIssue($hi: this, $healthIssueTypes.contains(this)
                                        ) from $healthIssues,
                                        count(1)
                                    ),
                           $filteredMeals: collectList($m)
                )
    	then
    	System.out.println("[DIET] Fourth layer - junk freq is sometimes, filter meals by health issues");
        $inputData.getDiet().setMeals($filteredMeals);
        update($inputData);
    end
   
rule "When junk food frequency is RARELY remove foods which are more than 30 percent junk food and filter health Issues"
	no-loop
    	when
    	    $meals: List(size > 0) from collect(Meal())
            $diet: Diet(kCal > 0, calorieMin != 0)
            $inputData: InputDataDiet($healthIssues: healthIssues,
                                          junkFoodFrequency == JunkFoodFrequency.RARELY,
                                          diet != null)
        	accumulate(
                           Meal($m: this,
                                    $healthIssueTypes: healthIssueTypes,
                                    junkPercentage <= 30
                                    ) from $meals and
                                    Number(intValue == 0) from accumulate(
                                        HealthIssue($hi: this, $healthIssueTypes.contains(this)
                                        ) from $healthIssues,
                                        count(1)
                                    ),
                           $filteredMeals: collectList($m)
                )
    	then
    	System.out.println("[DIET] Fourth layer - junk freq is rarely, filter meals by health issues");
        $inputData.getDiet().setMeals($filteredMeals);
        update($inputData);
    end
    
rule "When junk food frequency is NEVER dont remove any foods"
	no-loop
    	when
    	    $meals: List(size > 0) from collect(Meal())
            $diet: Diet(kCal > 0, calorieMin != 0)
            $inputData: InputDataDiet($healthIssues: healthIssues,
                                          junkFoodFrequency == JunkFoodFrequency.NEVER,
                                          diet != null)
        	accumulate(
                           Meal($m: this,
                                    $healthIssueTypes: healthIssueTypes
                                    ) from $meals and
                                    Number(intValue == 0) from accumulate(
                                        HealthIssue($hi: this, $healthIssueTypes.contains(this)
                                        ) from $healthIssues,
                                        count(1)
                                    ),
                           $filteredMeals: collectList($m)
                )
    	then
    	System.out.println("[DIET] Fourth layer - junk freq is never, filter meals by health issues");
        $inputData.getDiet().setMeals($filteredMeals);
        update($inputData);
    end
    
rule "When kCal are set filter dinner type Meals."
	no-loop
    	when
            $diet: Diet($goal: goal, kCal > 0, $kcalDinner: ((kCal/3) - (0.1*(kCal/3))), $kcalLunch: ((kCal/3) + (0.3*(kCal/3))),$kcalBreakfast: ((kCal/3) - (0.2*(kCal/3))) )
            $inputData: InputDataDiet(diet != null, diet.getMeals() != null,
                                      diet.getMeals().size() != 0,
                                      $meals: diet.getMeals())
        	accumulate(
                           Meal($m: this,
                           			mealType == MealType.DINNER,
                                    kCal >= ((0.9*$kcalDinner)),
                                    kCal <= ((1.1*$kcalDinner))
                                    ) from $meals,
                           $filteredDinners: collectList($m)
                )
            accumulate(
                           Meal($m: this,
                           			mealType == MealType.LUNCH,
                                    kCal >= (0.9*$kcalLunch),
                                    kCal <= (1.1*$kcalLunch)
                                    ) from $meals,
                           $filteredLunch: collectList($m)
                )
            accumulate(
                           Meal($m: this,
                           			mealType == MealType.BREAKFAST,
                                    kCal >= ((0.9*$kcalBreakfast)),
                                    kCal <= ((1.1*$kcalBreakfast))
                                    ) from $meals,
                           $filteredBreakfast: collectList($m)
                )
           accumulate(
               	           Meal($m: this,
               	           			$goal == Goal.MASS_GAIN,
                           			mealType == MealType.SNACK
                                    ) from $meals,
                           $filteredSnacks: collectList($m)
                )
    	then
    	System.out.println("[DIET] Fourth layer - when kcal is set filter by type");
    	ArrayList<Meal> list = new ArrayList<Meal>();
    	list.addAll($filteredDinners);
    	list.addAll($filteredLunch);
    	list.addAll($filteredBreakfast);
    	list.addAll($filteredSnacks);
        $inputData.getDiet().setMeals(list);
        update($inputData);
        drools.halt();
    end
   